◆자료형
- 문자 : 유니코드 문자
- 접미사가 필수인 자료형 : long(L을 붙임), float(f을 붙임)
	#long lnum = 10L;
	#float fnum = 10.0f;

◆값 대입과 리터럴 


◆상수
- 변하지 않는 수
- 일반적으로 대문자로 변수를 선언하지만 '_'를 활용하여 쓴다.
	#final int APPLE_COUNT = 1;

◆Scanner
- 일반적으로 만들어져 있는 클래스들은 대문자로 시작함.
- 


▣변수 쳇터에서의 학습 목적
- 변수를 선언할 수 있다
- 변수 선언 방법
- 자료형 
- 변수명 작성 규칙과 관례가 무엇이 있는지
- Scanner
- System.out.print();, System.out.println();

◆형변환
- 일시적으로만 바꾸는 것
- 자동 형변환, 강제 형변환

◆변수와 메모리 구조
- Static, Heap, Stack

◆출력 메소드
- printf(); : 장점으로는 정렬할 때 사용하면 좋음. 하지만 실무에선 활용도가 낮음.

◆escape 문자
- 

-----------------------------------------------------------------------------------

▣연산자 쳇터에서의 학습목적
- 연산자 종류를 알고, 결과를 예측할 수 있다
-  + - * / %
- / : 정수 / 정수 => 정수
- /, % : 2번째 수는 0이 오면 안됨
- % : 나누었을 때 나머지로 표현되면
- 비교 : 크기, 논리(&&, ||, !), 

◆단항 연산자
- !(Not 연산자)
- 증감 연산자 

◆산술 연산자
- + - * / %
- % : 홀수인지 짝수인지 결과를 낼 때 사용한다.

◆비교 연산자
- a == b (같다)
- a != b (다르다)
- a <= b, a >=b (작거나 같다, 크거나 같다)
- a < b, a > b (작다, 크다)

◆논리 연산자
- && (and)
- || (or)
- 컴퓨터는 앞의 결과값이 참이면 뒤에 값을 보지 않는다.

◆복합 대입 연산자
- +=
- -+
- *=
- /=
- %=

◆삼항 연산자(조건선택 연산자)
- 코드를 편하게 쓸때 매우 유용하다. 그러나 중요도는 좀 적다.
- 조건문으로 대체할 수 있다.

◆비트 연산자(거의 쓰이지 않음)
- 보통 led 전구 활용할 때 사용함.

질문 드릴 것 : 
1.

상담 받기 전 내가 정해야 할 부분 :
1. 어떤 분야로 취업하려고 하는지(명확함 필요)
(*명확할수록 더 좋은 상담 이루어짐)
2. 생각해둔 기업이 있는지
3. 