◆변수
 - 변수 선언을 할 수 있다
	필요에 의해서 잘 만들어져야 함.
 - 변수 선언 방법
	자료형 변수명;
	자료형 변수명 = 초기값;
 - 자료형 종류
 - 변수명 작성 규칙과 관례
 - 자료형 변환
	자동/강제(명시적)
 - Scanner 사용 방법 : 콘솔에서 입력 받기 위해!
 - sysout 사용 방법 : 콘솔에 출력

◆연산자
 - 연산자 종류를 알고, 결과를 예측할 수 있다.
 - 연산자 종류
  	산술
		% : 나누었을 때 나머지
		/ : 정수 / 정수 => 정수, 예)1/2 => 0
  	비교
		대입연산자와 ==를 구별, >=와 <=의 기호를 => 이나 =<로 잘 못 쓰지 말자
		결과가 참 또는 거짓 => 조건식
  	논리
		결과가 참 또는 거짓 => 조건식
		연산자 양쪽에 조건식
		&& : ~하고, ~이고, ~고, 둘 다 참이여야 참
		|| : ~이거나, 하거나, 이면, 둘 다 거짓이면 거짓, 하나라도 참이면 참	
  	증감
		최종적으로 1증가
		전위 : 증가 후 동작 
		후외 : 동작 후 증가
  	조건선택
		조건식 ? 참 : 거짓; 
		잘 사용하면 코드가 간결해지지만 사용도는 낮음
  	비트논리(잘 사용 안함)
  	비트쉬프트(잘 사용 안함)
  	대입
		오르녹에 있는 값을 왼쪽에 저장(덮어쓰기)
 - 연산자 우선순위 : ( )


◆(제어문)조건문
 - 조건에 따라 결과가 달라지는 상황에서 조건문을 쓸 수 있다.
 - '~이면...해라'라고 표현이 가능하면 조건문으로 쓰임.
 - ~ : 조건식, ...해라 : 실행문
 - if문 
	모든 조건문은 if문으로 표현이 가능!!!
	문법 1)
		if(조건식) {
			실행문;
		}
 - else if
	// 조건식1이 참이면 실행문 1을 실행
	if(조건식1) {
	  실행문 1;
	// (조건식1이 거짓이고) 조건식2가 참이면 실행문2를 실행 
	} else if(조건식2) {
	  실행문2;
	// (조건식1과 조건식2가 거짓이면) 실행문3을 실행
	} else {
	  실행문3;
	}

 - switch문
	switch(식 또는 변수) {
	case 값1:
		실행문1;
		break;
	case 값2:
		실행문2;
		break;
	default :
		실행문3;
	} 

◆(제어문)반복문
 - 규칙적인 작업을 반복적으로 할 때 반복문을 사용할 수 있다.(반복횟수와 규칙성을 잘 파악하면 좋음)
 - 반복문은 조건식이 거짓이 되는 순간 반복문을 종료
 - for문 
	for(1.초기화; 2.5.8.조건식; 4.7,증감식;) {
		3.6.실행문;
	}
	1.초기화 : 조건식에서 사용하는 변수를 초기화, 생략가능, 여러 변수를 초기화.
	2.조건식 : 반복문이 실행되는 곳으로 거짓이면 종료, 생략 가능, 생략하면 항상 참으로 됨.
	4.증감식 : 조건식에서 사용하는 변수를 증가 또는 감소하여 반복횟수를 조절
 - 중첩 반복문
	반복문의 실행문으로 반복문이 오는 경우
 - break문
	반복문을 빠져 나오는 키워드, 반드시 if문과 사용
 - continue문
	반복문의 특정 위치로 이동하는 키워드, for문에서는 증감식으로 이동, while문에서는 조건식으로 이동

◆
