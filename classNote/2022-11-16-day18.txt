◆열거형(자주 사용하진 않음)
 - 한정된 값을 가지는 개체를 만들 때 사용
 
	enum 열거형명{
		값1,
		값2,
		값3
	}


◆정규표현식 Regex(Regular expression)
 - 문자열의 패턴을 파악하기 위한 식
 - 회원가입 : 아이디, 비번 체크, 이메일 주소, 전화번호 확인 등 

예제1) 
문제 : http:// , https://
정규표현식 : ^https?://$


예제2) 문자열이 다음과 패턴이 되도록 정규 표현식을 작성
문제 : 2022-10-10
정규표현식 : ^\d{4}-\d{2}-\d{2}$
 
예제3)
문제 : 세 글자만 아무거나 인식되게
정규표현식 : ^...$

문제 : .(점) 표현
정규표현식 : \.

문제 : 02 또는 010만
정규표현식 : ^(02 | 010)$

@아이디 정규 표현식
문제 : 5~20자의 영문 소문자, 숫자와 특수기호(_),(-)만 사용 가능합니다.
정규표현식 : ^[a-z0-9_\\-]{5,20}$



# 정규 표현식

## 메타문자

* 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 언어
* \d : 숫자
* \s : 공백 & 탭
* \w : 영문 + 숫자
* [문자들] : 해당 문자들만 허용
  * [a-zA-Z0-9] : \w와 같음
  * [가-힣] : 모든 한글
* \+ : 1이상 무한대 이하
  * [a-z]+ : 소문자가 1개이상 무한대
* ? : 0 또는 1개
* \* :  0개 이상
* ^
  * 문장 처음에 위치 : 문장의 시작
  * 중간에 위치 : Not
* $ : 문장의 가장 끝
* {min, max} : 반복 횟수
  * [a-z]{1,3} : 소문자가 1개이상 3개이하
* () : 하나의 패턴 구분자 안에 서브 패턴을 지정해서 사용할 경우

## 함수

### 1. search()  : 검색된 문자열의 위치를 리턴 

### 2. replace() : 문자열의 일부를 다른 문자열로 변경 

### 3. test() : 찾는 문자열이 있는지 확인

## 실습(https://regex101.com)

* 전화번호
* 아이디
  * 알파벳 + 숫자
  * 첫글자 알파뱃
  * 5글자이상 10글자 이하
* 비밀번호
  * 알파벳 1개이상, 숫자 1개이상
  * 8글자 이상, 20글자 이하

# 참고문언

#### https://namu.wiki/w/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D

#### https://www.w3schools.com/js/js_regexp.asp
